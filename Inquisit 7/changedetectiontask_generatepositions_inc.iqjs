<userManual>
___________________________________________________________________________________________________________________	

											*Change Detection Task: HELPER SCRIPT*
___________________________________________________________________________________________________________________	

Script Author: Katja Borchert, Ph.D. (katjab@millisecond.com) for Millisecond Software, LLC
Date: 11-25-2020
last updated:  10-29-2024 by K. Borchert (katjab@millisecond.com) for Millisecond Software, LLC

Script Copyright Â© 10-29-2024 Millisecond Software

___________________________________________________________________________________________________________________
BACKGROUND INFO 	
___________________________________________________________________________________________________________________	

This script is a helper script to script changedetectiontask.iqjs.
It computes the positions/colors of the display squares if random lists (not the default lists)
should be used.

This script empties out the default lists and generates new lists on the fly.
</userManual>

**************************************************************************************************************
**************************************************************************************************************
	VALUES: automatically updated
**************************************************************************************************************
**************************************************************************************************************

<values>
/ countTrials = 0

/ x1Px = ""
/ y1Px = ""
/ x2Px = ""
/ y2Px = ""
/ x3Px = ""
/ y3Px = ""
/ x4Px = ""
/ y4Px = ""
/ x5Px = ""
/ y5Px = ""
/ x6Px = ""
/ y6Px = ""
/ x7Px = ""
/ y7Px = ""
/ x8Px = ""
/ y8Px = ""

/ diffX1 = 0
/ diffY1 = 0
/ diffX2 = 0
/ diffY2 = 0

/ countLoops = 0
/ countLoops2 = 0
/ stop = 0
/ repeat = 0
/ valid = 0

/ probeColor2 = ""
/ avoid = 0

/ countValidN8 = 0
/ countValidPracticeN8 = 0
/ countValidN6 = 0
/ countValidPracticeN6 = 0
/ countValidN4 = 0
/ countValidPracticeN4 = 0
</values>

**************************************************************************************************************
**************************************************************************************************************
	EXPRESSIONS
**************************************************************************************************************
**************************************************************************************************************

<expressions>
/ bufferPX = return display.getPixelsY(parameters.buffer)
/ bufferMM = return display.getMMY(expressions.bufferPX)

/ centerXPX = return display.getPixelsX(shape.actualPresentationSquare.x)
/ centerYPX = return display.getPixelsY(shape.actualPresentationSquare.y)

/ maxLeft = return (expressions.centerXPX - 0.5*(display.getPixelsX(shape.actualPresentationSquare.width)) + 0.5*(display.getPixelsX(shape.target1.width)));
 
/ maxRight = return (expressions.centerXPX + 0.5*(display.getPixelsX(shape.actualPresentationSquare.width)) - 0.5*(display.getPixelsX(shape.target1.width)));

/ maxTop = return (expressions.centerYPX - 0.5*(display.getPixelsY(shape.actualPresentationSquare.height)) + 0.5*(display.getPixelsY(shape.target1.height)));

/ maxBottom = return (expressions.centerYPX + 0.5*(display.getPixelsY(shape.actualPresentationSquare.height)) - 0.5*(display.getPixelsY(shape.target1.height)));

		
/ squareHeightPx = return display.getPixelsY(shape.target1.height)			
/ targetRadius = return (Math.hypot(display.getPixelsY(shape.target1.height/2),display.getPixelsY(shape.target1.height/2)))

/ debug = return display.getPixelsY(parameters.squareHeight)
/ debug2 = return display.getMMY(expressions.debug)

/ minimumTargetDistance = return ((2*expressions.targetRadius) + display.getPixelsY(parameters.buffer)); //minimum distance btw. centers of target shapes
	
/ minTargetDistancePct = return floor(display.getPercentY(expressions.minimumTargetDistance))			
/ stimX = return rand(expressions.maxLeft, expressions.maxRight);
/ stimY = return rand(expressions.maxTop, expressions.maxBottom);
	

/ distance = return Math.hypot((values.diffX1 - values.diffX2), (values.diffY1 - values.diffY2))
	
	
/ generateTargetShapePositions1 = {
	values.x1Px = expressions.stimX;
	values.y1Px = expressions.stimY;		
}
/ generateTargetShapePositions2 = {
	var checksCriteria = false;
	var d12 = "";

	while (!checksCriteria){
		values.x2Px = expressions.stimX;
		values.y2Px = expressions.stimY;	
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x2Px;
		values.diffY2 = values.y2Px;
		d12 = expressions.distance;
		if (d12 > expressions.minimumTargetDistance){
			checksCriteria = true;
		}		
	}
}
/ generateTargetShapePositions3 = {
	var checksCriteria = false;
	var d13 = "";
	var d23 = "";
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x3Px = expressions.stimX;
		values.y3Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x3Px;
		values.diffY2 = values.y3Px;
		d13 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x3Px;
		values.diffY2 = values.y3Px;
		d23 = expressions.distance;		
		
		//check if targetshape is okay
		if (d13 > expressions.minimumTargetDistance)
			if (d23 > expressions.minimumTargetDistance)
				checksCriteria = true;	
	}
	
	if (values.countLoops >= 500){
		values.repeat = 1;
	}	
}
/ generateTargetShapePositions4 = {
	var checksCriteria = false;
	var d14 = "";
	var d24 = "";
	var d34 = "";
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x4Px = expressions.stimX;
		values.y4Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x4Px;
		values.diffY2 = values.y4Px;
		d14 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x4Px;
		values.diffY2 = values.y4Px;
		d24 = expressions.distance;	
	
		//check against shape3:
		values.diffX1 = values.x3Px;
		values.diffY1 = values.y3Px;
		values.diffX2 = values.x4Px;
		values.diffY2 = values.y4Px;
		d34 = expressions.distance;		
		
		//check if targetshape is okay
		if (d14 > expressions.minimumTargetDistance)
			if (d24 > expressions.minimumTargetDistance)
				if (d34 > expressions.minimumTargetDistance)
					checksCriteria = true;
	}
	
	if (values.countLoops >= 500){
		values.repeat = 1;
	}	
}

/ generateTargetShapePositions5 = {
	var checksCriteria = false;
	var d15 = "";
	var d25 = "";
	var d35 = "";
	var d45 = "";
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x5Px = expressions.stimX;
		values.y5Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x5Px;
		values.diffY2 = values.y5Px;
		d15 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x5Px;
		values.diffY2 = values.y5Px;
		d25 = expressions.distance;	
	
		//check against shape3:
		values.diffX1 = values.x3Px;
		values.diffY1 = values.y3Px;
		values.diffX2 = values.x5Px;
		values.diffY2 = values.y5Px;
		d35 = expressions.distance;	
	
		//check against shape4:
		values.diffX1 = values.x4Px;
		values.diffY1 = values.y4Px;
		values.diffX2 = values.x5Px;
		values.diffY2 = values.y5Px;
		d45 = expressions.distance;		
		
		//check if targetshape is okay
		if (d15 > expressions.minimumTargetDistance)
			if (d25 > expressions.minimumTargetDistance)
					if (d35 > expressions.minimumTargetDistance)
						if (d45 > expressions.minimumTargetDistance)
							checksCriteria = true;
	}
	
	if (values.countLoops >= 500){
		values.repeat = 1;
	}
}

/ generateTargetShapePositions6 = {
	var checksCriteria = false;
	var d16 = "";
	var d26 = "";
	var d36 = "";
	var d46 = "";
	var d56 = "";	
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x6Px = expressions.stimX;
		values.y6Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x6Px;
		values.diffY2 = values.y6Px;
		d16 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x6Px;
		values.diffY2 = values.y6Px;
		d26 = expressions.distance;	
	
		//check against shape3:
		values.diffX1 = values.x3Px;
		values.diffY1 = values.y3Px;
		values.diffX2 = values.x6Px;
		values.diffY2 = values.y6Px;
		d36 = expressions.distance;	
	
		//check against shape4:
		values.diffX1 = values.x4Px;
		values.diffY1 = values.y4Px;
		values.diffX2 = values.x6Px;
		values.diffY2 = values.y6Px;
		d46 = expressions.distance;	
	
		//check against shape5:
		values.diffX1 = values.x5Px;
		values.diffY1 = values.y5Px;
		values.diffX2 = values.x6Px;
		values.diffY2 = values.y6Px;
		d56 = expressions.distance;		
		
		//check if targetshape is okay
		if (d16 > expressions.minimumTargetDistance)
			if (d26 > expressions.minimumTargetDistance)
					if (d36 > expressions.minimumTargetDistance)
						if (d46 > expressions.minimumTargetDistance)
							if (d56 > expressions.minimumTargetDistance)
							checksCriteria = true;
	}
	if (values.countLoops >= 500){
		values.repeat = 1;
	}
}

/ generateTargetShapePositions7 = {
	var checksCriteria = false;
	var d17 = "";
	var d27 = "";
	var d37 = "";
	var d47 = "";
	var d57 = "";
	var d67 = "";		
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x7Px = expressions.stimX;
		values.y7Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d17 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d27 = expressions.distance;	
	
		//check against shape3:
		values.diffX1 = values.x3Px;
		values.diffY1 = values.y3Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d37 = expressions.distance;	
	
		//check against shape4:
		values.diffX1 = values.x4Px;
		values.diffY1 = values.y4Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d47 = expressions.distance;	
	
		//check against shape5:
		values.diffX1 = values.x5Px;
		values.diffY1 = values.y5Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d57 = expressions.distance;

		//check against shape6:
		values.diffX1 = values.x6Px;
		values.diffY1 = values.y6Px;
		values.diffX2 = values.x7Px;
		values.diffY2 = values.y7Px;
		d67 = expressions.distance;			
		
		//check if targetshape is okay
		if (d17 > expressions.minimumTargetDistance)
			if (d27 > expressions.minimumTargetDistance)
					if (d37 > expressions.minimumTargetDistance)
						if (d47 > expressions.minimumTargetDistance)
							if (d57 > expressions.minimumTargetDistance)
								if (d67 > expressions.minimumTargetDistance)
									checksCriteria = true;
	}
	if (values.countLoops >= 500){
		values.repeat = 1;
	}
}

/ generateTargetShapePositions8 = {
	var checksCriteria = false;
	var d18 = "";
	var d28 = "";
	var d38 = "";
	var d48 = "";
	var d58 = "";
	var d68 = "";
	var d78 = "";		
	
	values.countLoops = 0;
	while (!checksCriteria && values.countLoops < 500){
		values.countLoops++;
		
		values.x8Px = expressions.stimX;
		values.y8Px = expressions.stimY;	
		
		//check against shape1:
		values.diffX1 = values.x1Px;
		values.diffY1 = values.y1Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d18 = expressions.distance;
		
		//check against shape2:
		values.diffX1 = values.x2Px;
		values.diffY1 = values.y2Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d28 = expressions.distance;	
	
		//check against shape3:
		values.diffX1 = values.x3Px;
		values.diffY1 = values.y3Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d38 = expressions.distance;	
	
		//check against shape4:
		values.diffX1 = values.x4Px;
		values.diffY1 = values.y4Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d48 = expressions.distance;	
	
		//check against shape5:
		values.diffX1 = values.x5Px;
		values.diffY1 = values.y5Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d58 = expressions.distance;

		//check against shape6:
		values.diffX1 = values.x6Px;
		values.diffY1 = values.y6Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d68 = expressions.distance;	

		//check against shape7:
		values.diffX1 = values.x7Px;
		values.diffY1 = values.y7Px;
		values.diffX2 = values.x8Px;
		values.diffY2 = values.y8Px;
		d78 = expressions.distance;			
		
		//check if targetshape is okay
		if (d18 > expressions.minimumTargetDistance)
			if (d28 > expressions.minimumTargetDistance)
					if (d38 > expressions.minimumTargetDistance)
						if (d48 > expressions.minimumTargetDistance)
							if (d58 > expressions.minimumTargetDistance)
								if (d68 > expressions.minimumTargetDistance)
									if (d78 > expressions.minimumTargetDistance)
										checksCriteria = true;
	}
	if (values.countLoops >= 500){
		values.repeat = 1;
	}
}
</expressions>

**************************************************************************************************************
**************************************************************************************************************
	STIMULI
**************************************************************************************************************
**************************************************************************************************************

<text wait>
/ items = ("Please wait, the program will begin shortly")
/ erase = false
</text>

<shape actualPresentationSquare>
/ shape = rectangle
/ width = pct(parameters.presentationSquareHeight *0.75)
/ height = (parameters.presentationSquareHeight)
/ color = white
/ erase = false
/ position = (50%, 50%)
</shape>

**************************************************************************************************************
**************************************************************************************************************
	LISTS	
**************************************************************************************************************
**************************************************************************************************************
<list colors>
/ items = ("white", "red", "blue", "green", "black", "yellow", "purple")
/ not = [
	values.avoid;]
/ resetInterval = 0
/ selectionRate = always
</list>

//Note: list fills during runtime with the colors of the sampled display squares (per trial)
<list currentColors>
/ not = [
	values.avoid;]
</list>

<list practiceN8TrialType>
/ items = (1,2)
/ poolSize = 6
/ replace = false
</list>

<list n8TrialType>
/ items = (1,2)
/ poolSize = 60
/ replace = false
</list>

<list practiceN6TrialType>
/ items = (1,2)
/ poolSize = 6
/ replace = false
</list>

<list n6TrialType>
/ items = (1,2)
/ poolSize = 60
/ replace = false
</list>

<list practiceN4TrialType>
/ items = (1,2)
/ poolSize = 6
/ replace = false
</list>

<list n4TrialType>
/ items = (1,2)
/ poolSize = 60
/ replace = false
</list>

<list n8ProbePositions>
/ items = (1, 2, 3, 4, 5, 6, 7, 8)
/ replace = false
</list>

<list n6ProbePositions>
/ items = (1, 2, 3, 4, 5, 6)
/ replace = false
</list>

<list n4ProbePositions>
/ items = (1, 2, 3, 4)
/ replace = false
</list>


**************************************************************************************************************
**************************************************************************************************************
	TRIALS 	
**************************************************************************************************************
**************************************************************************************************************

<trial generatePracticeN4>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);

		values.trialType = list.practiceN4TrialTypes.nextValue;
		values.probe = list.n4ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidPracticeN4++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.practiceN4PositionsX1.appendItem(values.x1);
		list.practiceN4PositionsY1.appendItem(values.y1);
		list.practiceN4PositionsX2.appendItem(values.x2);
		list.practiceN4PositionsY2.appendItem(values.y2);
		list.practiceN4PositionsX3.appendItem(values.x3);
		list.practiceN4PositionsY3.appendItem(values.y3);
		list.practiceN4PositionsX4.appendItem(values.x4);
		list.practiceN4PositionsY4.appendItem(values.y4);

		//add the randomly generated colors to the corresponding lists
		list.practiceN4Colors1.appendItem(values.color1);
		list.practiceN4Colors2.appendItem(values.color2);
		list.practiceN4Colors3.appendItem(values.color3);
		list.practiceN4Colors4.appendItem(values.color4);

		//add probe color to the corresponding lists
		list.practiceN4TrialTypes.appendItem(values.trialType);
		list.practiceN4ProbePosition.appendItem(values.probe);
		list.practiceN4ProbeColorAll.appendItem(values.probeColor);
		list.practiceN4ProbeColorCurrent.appendItem(values.probeColor2);
	}//if valid == 0, the countValidPracticeN4 is not increased and the trial is run again;
}
/ branch = {
	if (values.countValidPracticeN4 < 6) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>

<trial generateN4>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);

		values.trialType = list.n4TrialType.nextValue;
		values.probe = list.n4ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidN4++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.n4PositionsX1.appendItem(values.x1);
		list.n4PositionsY1.appendItem(values.y1);
		list.n4PositionsX2.appendItem(values.x2);
		list.n4PositionsY2.appendItem(values.y2);
		list.n4PositionsX3.appendItem(values.x3);
		list.n4PositionsY3.appendItem(values.y3);
		list.n4PositionsX4.appendItem(values.x4);
		list.n4PositionsY4.appendItem(values.y4);

		//add the randomly generated colors to the corresponding lists
		list.n4Colors1.appendItem(values.color1);
		list.n4Colors2.appendItem(values.color2);
		list.n4Colors3.appendItem(values.color3);
		list.n4Colors4.appendItem(values.color4);

		//add probe color to the corresponding lists
		list.n4TrialTypes.appendItem(values.trialType);
		list.n4ProbePosition.appendItem(values.probe);
		list.n4ProbeColorAll.appendItem(values.probeColor);
		list.n4ProbeColorCurrent.appendItem(values.probeColor2);
	}
}
/ branch = {
	if (values.countValidN4 < 60) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>

<trial generatePracticeN6>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions5;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions6;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);
	values.x5 = display.getPercentX(values.x5Px);
	values.y5 = display.getPercentY(values.y5Px);
	values.x6 = display.getPercentX(values.x6Px);
	values.y6 = display.getPercentY(values.y6Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		values.color5 = list.colors.nextValue;
		values.color6 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);
		list.currentColors.appendItem(values.color5);
		list.currentColors.appendItem(values.color6);

		values.trialType = list.practiceN6TrialTypes.nextValue;
		values.probe = list.n6ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			} else if (values.probe == 5) {
				values.probeColor = values.color5;
			} else if (values.probe == 6) {
				values.probeColor = values.color6;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			} else if (values.probe == 5) {
				values.avoid = values.color5;
			} else if (values.probe == 6) {
				values.avoid = values.color6;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidPracticeN6++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.practiceN6PositionsX1.appendItem(values.x1);
		list.practiceN6PositionsY1.appendItem(values.y1);
		list.practiceN6PositionsX2.appendItem(values.x2);
		list.practiceN6PositionsY2.appendItem(values.y2);
		list.practiceN6PositionsX3.appendItem(values.x3);
		list.practiceN6PositionsY3.appendItem(values.y3);
		list.practiceN6PositionsX4.appendItem(values.x4);
		list.practiceN6PositionsY4.appendItem(values.y4);
		list.practiceN6PositionsX5.appendItem(values.x5);
		list.practiceN6PositionsY5.appendItem(values.y5);
		list.practiceN6PositionsX6.appendItem(values.x6);
		list.practiceN6PositionsY6.appendItem(values.y6);

		//add the randomly generated colors to the corresponding lists
		list.practiceN6Colors1.appendItem(values.color1);
		list.practiceN6Colors2.appendItem(values.color2);
		list.practiceN6Colors3.appendItem(values.color3);
		list.practiceN6Colors4.appendItem(values.color4);
		list.practiceN6Colors5.appendItem(values.color5);
		list.practiceN6Colors6.appendItem(values.color6);

		//add probe color to the corresponding lists
		list.practiceN6TrialTypes.appendItem(values.trialType);
		list.practiceN6ProbePosition.appendItem(values.probe);
		list.practiceN6ProbeColorAll.appendItem(values.probeColor);
		list.practiceN6ProbeColorCurrent.appendItem(values.probeColor2);
	}
}
/ branch = {
	if (values.countValidPracticeN6 < 6) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>

<trial generateN6>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions5;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions6;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);
	values.x5 = display.getPercentX(values.x5Px);
	values.y5 = display.getPercentY(values.y5Px);
	values.x6 = display.getPercentX(values.x6Px);
	values.y6 = display.getPercentY(values.y6Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		values.color5 = list.colors.nextValue;
		values.color6 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);
		list.currentColors.appendItem(values.color5);
		list.currentColors.appendItem(values.color6);

		values.trialType = list.n6TrialType.nextValue;
		values.probe = list.n6ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			} else if (values.probe == 5) {
				values.probeColor = values.color5;
			} else if (values.probe == 6) {
				values.probeColor = values.color6;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			} else if (values.probe == 5) {
				values.avoid = values.color5;
			} else if (values.probe == 6) {
				values.avoid = values.color6;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidN6++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.n6PositionsX1.appendItem(values.x1);
		list.n6PositionsY1.appendItem(values.y1);
		list.n6PositionsX2.appendItem(values.x2);
		list.n6PositionsY2.appendItem(values.y2);
		list.n6PositionsX3.appendItem(values.x3);
		list.n6PositionsY3.appendItem(values.y3);
		list.n6PositionsX4.appendItem(values.x4);
		list.n6PositionsY4.appendItem(values.y4);
		list.n6PositionsX5.appendItem(values.x5);
		list.n6PositionsY5.appendItem(values.y5);
		list.n6PositionsX6.appendItem(values.x6);
		list.n6PositionsY6.appendItem(values.y6);

		//add the randomly generated colors to the corresponding lists
		list.n6Colors1.appendItem(values.color1);
		list.n6Colors2.appendItem(values.color2);
		list.n6Colors3.appendItem(values.color3);
		list.n6Colors4.appendItem(values.color4);
		list.n6Colors5.appendItem(values.color5);
		list.n6Colors6.appendItem(values.color6);

		//add probe color to the corresponding lists
		list.n6TrialTypes.appendItem(values.trialType);
		list.n6ProbePosition.appendItem(values.probe);
		list.n6ProbeColorAll.appendItem(values.probeColor);
		list.n6ProbeColorCurrent.appendItem(values.probeColor2);
	}
}
/ branch = {
	if (values.countValidN6 < 60) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>


<trial generatePracticeN8>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions5;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions6;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions7;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions8;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);
	values.x5 = display.getPercentX(values.x5Px);
	values.y5 = display.getPercentY(values.y5Px);
	values.x6 = display.getPercentX(values.x6Px);
	values.y6 = display.getPercentY(values.y6Px);
	values.x7 = display.getPercentX(values.x7Px);
	values.y7 = display.getPercentY(values.y7Px);
	values.x8 = display.getPercentX(values.x8Px);
	values.y8 = display.getPercentY(values.y8Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		values.color5 = list.colors.nextValue;
		values.color6 = list.colors.nextValue;
		values.color7 = list.colors.nextValue;
		values.color8 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);
		list.currentColors.appendItem(values.color5);
		list.currentColors.appendItem(values.color6);
		list.currentColors.appendItem(values.color7);
		list.currentColors.appendItem(values.color8);

		values.trialType = list.practiceN8TrialType.nextValue;
		values.probe = list.n8ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			} else if (values.probe == 5) {
				values.probeColor = values.color5;
			} else if (values.probe == 6) {
				values.probeColor = values.color6;
			} else if (values.probe == 7) {
				values.probeColor = values.color7;
			} else if (values.probe == 8) {
				values.probeColor = values.color8;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			} else if (values.probe == 5) {
				values.avoid = values.color5;
			} else if (values.probe == 6) {
				values.avoid = values.color6;
			} else if (values.probe == 7) {
				values.avoid = values.color7;
			} else if (values.probe == 8) {
				values.avoid = values.color8;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidPracticeN8++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.practiceN8PositionsX1.appendItem(values.x1);
		list.practiceN8PositionsY1.appendItem(values.y1);
		list.practiceN8PositionsX2.appendItem(values.x2);
		list.practiceN8PositionsY2.appendItem(values.y2);
		list.practiceN8PositionsX3.appendItem(values.x3);
		list.practiceN8PositionsY3.appendItem(values.y3);
		list.practiceN8PositionsX4.appendItem(values.x4);
		list.practiceN8PositionsY4.appendItem(values.y4);
		list.practiceN8PositionsX5.appendItem(values.x5);
		list.practiceN8PositionsY5.appendItem(values.y5);
		list.practiceN8PositionsX6.appendItem(values.x6);
		list.practiceN8PositionsY6.appendItem(values.y6);
		list.practiceN8PositionsX7.appendItem(values.x7);
		list.practiceN8PositionsY7.appendItem(values.y7);
		list.practiceN8PositionsX8.appendItem(values.x8);
		list.practiceN8PositionsY8.appendItem(values.y8);

		//add the randomly generated colors to the corresponding lists
		list.practiceN8Colors1.appendItem(values.color1);
		list.practiceN8Colors2.appendItem(values.color2);
		list.practiceN8Colors3.appendItem(values.color3);
		list.practiceN8Colors4.appendItem(values.color4);
		list.practiceN8Colors5.appendItem(values.color5);
		list.practiceN8Colors6.appendItem(values.color6);
		list.practiceN8Colors7.appendItem(values.color7);
		list.practiceN8Colors8.appendItem(values.color8);

		//add probe color to the corresponding lists
		list.practiceN8TrialTypes.appendItem(values.trialType);
		list.practiceN8ProbePosition.appendItem(values.probe);
		list.practiceN8ProbeColorAll.appendItem(values.probeColor);
		list.practiceN8ProbeColorCurrent.appendItem(values.probeColor2);
	}
}
/ branch = {
	if (values.countValidPracticeN8 < 6) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>

<trial generateN8>
/ onTrialBegin = {
	values.countTrials++;
	values.repeat = 1;
	values.valid = 1;
	values.countLoops2 = 0;//helper variable to get out of potential endless loops

	while (values.repeat == 1 && values.countLoops2 < 500) {
		values.countLoops2++;

		values.repeat = 0;
		expressions.generateTargetShapePositions1;
		expressions.generateTargetShapePositions2;

		if (values.repeat == 0) {
			expressions.generateTargetShapePositions3;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions4;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions5;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions6;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions7;
		}
		if (values.repeat == 0) {
			expressions.generateTargetShapePositions8;
		}
	}

	//proportional coordinates:
	values.x1 = display.getPercentX(values.x1Px);
	values.y1 = display.getPercentY(values.y1Px);
	values.x2 = display.getPercentX(values.x2Px);
	values.y2 = display.getPercentY(values.y2Px);
	values.x3 = display.getPercentX(values.x3Px);
	values.y3 = display.getPercentY(values.y3Px);
	values.x4 = display.getPercentX(values.x4Px);
	values.y4 = display.getPercentY(values.y4Px);
	values.x5 = display.getPercentX(values.x5Px);
	values.y5 = display.getPercentY(values.y5Px);
	values.x6 = display.getPercentX(values.x6Px);
	values.y6 = display.getPercentY(values.y6Px);
	values.x7 = display.getPercentX(values.x7Px);
	values.y7 = display.getPercentY(values.y7Px);
	values.x8 = display.getPercentX(values.x8Px);
	values.y8 = display.getPercentY(values.y8Px);

	if (values.countLoops2 >= 500) {
		values.valid = 0; //script would have been caught in an endless loop
	} else {
		list.colors.reset();
		values.avoid = "";
		values.color1 = list.colors.nextValue;
		values.color2 = list.colors.nextValue;
		values.color3 = list.colors.nextValue;
		values.color4 = list.colors.nextValue;
		values.color5 = list.colors.nextValue;
		values.color6 = list.colors.nextValue;
		values.color7 = list.colors.nextValue;
		values.color8 = list.colors.nextValue;
		list.currentColors.reset();
		list.currentColors.appendItem(values.color1);
		list.currentColors.appendItem(values.color2);
		list.currentColors.appendItem(values.color3);
		list.currentColors.appendItem(values.color4);
		list.currentColors.appendItem(values.color5);
		list.currentColors.appendItem(values.color6);
		list.currentColors.appendItem(values.color7);
		list.currentColors.appendItem(values.color8);

		values.trialType = list.n8TrialTypes.nextValue;
		values.probe = list.n8ProbePositions.nextValue;
		if (values.trialType == 1) {
			if (values.probe == 1) {
				values.probeColor = values.color1;
			} else if (values.probe == 2) {
				values.probeColor = values.color2;
			} else if (values.probe == 3) {
				values.probeColor = values.color3;
			} else if (values.probe == 4) {
				values.probeColor = values.color4;
			} else if (values.probe == 5) {
				values.probeColor = values.color5;
			} else if (values.probe == 6) {
				values.probeColor = values.color6;
			} else if (values.probe == 7) {
				values.probeColor = values.color7;
			} else if (values.probe == 8) {
				values.probeColor = values.color8;
			}
			values.probeColor2 = values.probeColor;
		} else {
			if (values.probe == 1) {
				values.avoid = values.color1;
			} else if (values.probe == 2) {
				values.avoid = values.color2;
			} else if (values.probe == 3) {
				values.avoid = values.color3;
			} else if (values.probe == 4) {
				values.avoid = values.color4;
			} else if (values.probe == 5) {
				values.avoid = values.color5;
			} else if (values.probe == 6) {
				values.avoid = values.color6;
			} else if (values.probe == 7) {
				values.avoid = values.color7;
			} else if (values.probe == 8) {
				values.avoid = values.color8;
			}
			list.colors.reset();
			values.probeColor = list.colors.nextValue;
			values.probeColor2 = list.currentColors.nextValue;
		}
	}
}
/ stimulusFrames = [1 = clearScreen, wait]
/ onTrialEnd = {
	if (values.valid == 1) {
		values.countValidN8++;

		//add the randomly generated X and y coordinates to the corresponding lists
		list.n8PositionsX1.appendItem(values.x1);
		list.n8PositionsY1.appendItem(values.y1);
		list.n8PositionsX2.appendItem(values.x2);
		list.n8PositionsY2.appendItem(values.y2);
		list.n8PositionsX3.appendItem(values.x3);
		list.n8PositionsY3.appendItem(values.y3);
		list.n8PositionsX4.appendItem(values.x4);
		list.n8PositionsY4.appendItem(values.y4);
		list.n8PositionsX5.appendItem(values.x5);
		list.n8PositionsY5.appendItem(values.y5);
		list.n8PositionsX6.appendItem(values.x6);
		list.n8PositionsY6.appendItem(values.y6);
		list.n8PositionsX7.appendItem(values.x7);
		list.n8PositionsY7.appendItem(values.y7);
		list.n8PositionsX8.appendItem(values.x8);
		list.n8PositionsY8.appendItem(values.y8);

		//add the randomly generated colors to the corresponding lists
		list.n8Colors1.appendItem(values.color1);
		list.n8Colors2.appendItem(values.color2);
		list.n8Colors3.appendItem(values.color3);
		list.n8Colors4.appendItem(values.color4);
		list.n8Colors5.appendItem(values.color5);
		list.n8Colors6.appendItem(values.color6);
		list.n8Colors7.appendItem(values.color7);
		list.n8Colors8.appendItem(values.color8);

		//add probe color to the corresponding lists
		list.n8TrialTypes.appendItem(values.trialType);
		list.n8ProbePosition.appendItem(values.probe);
		list.n8ProbeColorAll.appendItem(values.probeColor);
		list.n8ProbeColorCurrent.appendItem(values.probeColor2);
	}
}
/ branch = {
	if (values.countValidN8 < 60) {
		return this;
	} else {
		return null;
	}
}
/ trialDuration = 0
/ recordData = false
</trial>

	//proportional coordinates:
	values.x1 = round(display.getPercentX(values.x1Px));
	values.y1 = round(display.getPercentY(values.y1Px));
	values.x2 = round(display.getPercentX(values.x2Px));
	values.y2 = round(display.getPercentY(values.y2Px));
	values.x3 = round(display.getPercentX(values.x3Px));
	values.y3 = round(display.getPercentY(values.y3Px));
	values.x4 = round(display.getPercentX(values.x4Px));
	values.y4 = round(display.getPercentY(values.y4Px));
	values.x5 = round(display.getPercentX(values.x5Px));
	values.y5 = round(display.getPercentY(values.y5Px));
	values.x6 = round(display.getPercentX(values.x6Px));
	values.y6 = round(display.getPercentY(values.y6Px));
	values.x7 = round(display.getPercentX(values.x7Px));
	values.y7 = round(display.getPercentY(values.y7Px));
	values.x8 = round(display.getPercentX(values.x8Px));
	values.y8 = round(display.getPercentY(values.y8Px));

**************************************************************************************************************
**************************************************************************************************************
	BLOCKS
**************************************************************************************************************
**************************************************************************************************************

<block generatePracticeN4>
/ skip = {
	return (parameters.runFixedDesign == true);
}
/ onBlockBegin = {
	list.practiceN4TrialType.reset();
	list.n4ProbePositions.reset();

	//empty out the followin default lists
	list.practiceN4PositionsX1.clearItems();
	list.practiceN4PositionsX2.clearItems();
	list.practiceN4PositionsX3.clearItems();
	list.practiceN4PositionsX4.clearItems();
	list.practiceN4PositionsY1.clearItems();
	list.practiceN4PositionsY2.clearItems();
	list.practiceN4PositionsY3.clearItems();
	list.practiceN4PositionsY4.clearItems();

	list.practiceN4Colors1.clearItems();
	list.practiceN4Colors2.clearItems();
	list.practiceN4Colors3.clearItems();
	list.practiceN4Colors4.clearItems();

	list.practiceN4TrialTypes.clearItems();
	list.practiceN4ProbePosition.clearItems();
	list.practiceN4ProbeColorAll.clearItems();
	list.practiceN4ProbeColorCurrent.clearItems();
}
/ trials = [1 = generatePracticeN4]
</block>

<block generateN4>
/ skip = {
	return (parameters.runFixedDesign == true);
}
/ onBlockBegin = {
	list.n4TrialType.reset();
	list.n4ProbePositions.reset();

	//empty out the followin default lists
	list.n4PositionsX1.clearItems();
	list.n4PositionsX2.clearItems();
	list.n4PositionsX3.clearItems();
	list.n4PositionsX4.clearItems();
	list.n4PositionsY1.clearItems();
	list.n4PositionsY2.clearItems();
	list.n4PositionsY3.clearItems();
	list.n4PositionsY4.clearItems();

	list.n4Colors1.clearItems();
	list.n4Colors2.clearItems();
	list.n4Colors3.clearItems();
	list.n4Colors4.clearItems();

	list.n4TrialTypes.clearItems();
	list.n4ProbePosition.clearItems();
	list.n4ProbeColorAll.clearItems();
	list.n4ProbeColorCurrent.clearItems();
}
/ trials = [1 = generateN4]
</block>

<block generatePracticeN6>
/ skip = {
	return (parameters.runFixedDesign == true);
}
/ onBlockBegin = {
	list.practiceN6TrialTypes.reset();
	list.n6ProbePositions.reset();

	//empty out the followin default lists
	list.practiceN6PositionsX1.clearItems();
	list.practiceN6PositionsX2.clearItems();
	list.practiceN6PositionsX3.clearItems();
	list.practiceN6PositionsX4.clearItems();
	list.practiceN6PositionsX5.clearItems();
	list.practiceN6PositionsX6.clearItems();
	list.practiceN6PositionsY1.clearItems();
	list.practiceN6PositionsY2.clearItems();
	list.practiceN6PositionsY3.clearItems();
	list.practiceN6PositionsY4.clearItems();
	list.practiceN6PositionsY5.clearItems();
	list.practiceN6PositionsY6.clearItems();

	list.practiceN6Colors1.clearItems();
	list.practiceN6Colors2.clearItems();
	list.practiceN6Colors3.clearItems();
	list.practiceN6Colors4.clearItems();
	list.practiceN6Colors5.clearItems();
	list.practiceN6Colors6.clearItems();

	list.practiceN6TrialTypes.clearItems();
	list.practiceN6ProbePosition.clearItems();
	list.practiceN6ProbeColorAll.clearItems();
	list.practiceN6ProbeColorCurrent.clearItems();
}
/ trials = [1 = generatePracticeN6]
</block>

<block generateN6>
/ skip = {
	return (parameters.runFixedDesign == true);
}

/ onBlockBegin = {
	list.n6TrialType.reset();
	list.n6ProbePositions.reset();

	//empty out the followin default lists
	list.n6PositionsX1.clearItems();
	list.n6PositionsX2.clearItems();
	list.n6PositionsX3.clearItems();
	list.n6PositionsX4.clearItems();
	list.n6PositionsX5.clearItems();
	list.n6PositionsX6.clearItems();
	list.n6PositionsY1.clearItems();
	list.n6PositionsY2.clearItems();
	list.n6PositionsY3.clearItems();
	list.n6PositionsY4.clearItems();
	list.n6PositionsY5.clearItems();
	list.n6PositionsY6.clearItems();

	list.n6Colors1.clearItems();
	list.n6Colors2.clearItems();
	list.n6Colors3.clearItems();
	list.n6Colors4.clearItems();
	list.n6Colors5.clearItems();
	list.n6Colors6.clearItems();

	list.n6TrialTypes.clearItems();
	list.n6ProbePosition.clearItems();
	list.n6ProbeColorAll.clearItems();
	list.n6ProbeColorCurrent.clearItems();
}
/ trials = [1 = generateN6]
</block>


<block generatePracticeN8>
/ skip = {
	return (parameters.runFixedDesign == true);
}
/ onBlockBegin = {
	list.practiceN8TrialType.reset();
	list.n8ProbePositions.reset();

	//empty out the followin default lists
	list.practiceN8PositionsX1.clearItems();
	list.practiceN8PositionsX2.clearItems();
	list.practiceN8PositionsX3.clearItems();
	list.practiceN8PositionsX4.clearItems();
	list.practiceN8PositionsX5.clearItems();
	list.practiceN8PositionsX6.clearItems();
	list.practiceN8PositionsX7.clearItems();
	list.practiceN8PositionsX8.clearItems();
	list.practiceN8PositionsY1.clearItems();
	list.practiceN8PositionsY2.clearItems();
	list.practiceN8PositionsY3.clearItems();
	list.practiceN8PositionsY4.clearItems();
	list.practiceN8PositionsY5.clearItems();
	list.practiceN8PositionsY6.clearItems();
	list.practiceN8PositionsY7.clearItems();
	list.practiceN8PositionsY8.clearItems();

	list.practiceN8Colors1.clearItems();
	list.practiceN8Colors2.clearItems();
	list.practiceN8Colors3.clearItems();
	list.practiceN8Colors4.clearItems();
	list.practiceN8Colors5.clearItems();
	list.practiceN8Colors6.clearItems();
	list.practiceN8Colors7.clearItems();
	list.practiceN8Colors8.clearItems();

	list.practiceN8TrialTypes.clearItems();
	list.practiceN8ProbePosition.clearItems();
	list.practiceN8ProbeColorAll.clearItems();
	list.practiceN8ProbeColorCurrent.clearItems();
}
/ trials = [1 = generatePracticeN8]
</block>

<block generateN8>
/ skip = {
	return (parameters.runFixedDesign == true);
}

/ onBlockBegin = {
	list.n8TrialTypes.reset();
	list.n8ProbePositions.reset();

	//empty out the followin default lists
	list.n8PositionsX1.clearItems();
	list.n8PositionsX2.clearItems();
	list.n8PositionsX3.clearItems();
	list.n8PositionsX4.clearItems();
	list.n8PositionsX5.clearItems();
	list.n8PositionsX6.clearItems();
	list.n8PositionsX7.clearItems();
	list.n8PositionsX8.clearItems();
	list.n8PositionsY1.clearItems();
	list.n8PositionsY2.clearItems();
	list.n8PositionsY3.clearItems();
	list.n8PositionsY4.clearItems();
	list.n8PositionsY5.clearItems();
	list.n8PositionsY6.clearItems();
	list.n8PositionsY7.clearItems();
	list.n8PositionsY8.clearItems();

	list.n8Colors1.clearItems();
	list.n8Colors2.clearItems();
	list.n8Colors3.clearItems();
	list.n8Colors4.clearItems();
	list.n8Colors5.clearItems();
	list.n8Colors6.clearItems();
	list.n8Colors7.clearItems();
	list.n8Colors8.clearItems();

	list.n8TrialTypes.clearItems();
	list.n8ProbePositions.clearItems();
	list.n8ProbeColorAll.clearItems();
	list.n8ProbeColorCurrent.clearItems();
}
/ trials = [1 = generateN8]
</block>


**************************************************************************************************************
												End of File
**************************************************************************************************************